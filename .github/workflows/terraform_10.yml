name: Strapi Deployment using ECS task 10

on:
  workflow_dispatch:

jobs:
  apply:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7 

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Terraform Init
        run: |
          cd terraform_10
          terraform init

      - name: Terraform Plan
        run: |
          cd terraform_10
          terraform plan
          
      - name: Terraform Apply
        run: |
          cd terraform_10
          terraform apply -auto-approve

      - name: Register new ECS task definition
        id: register_task_def
        run: |
          TASK_DEF_JSON=$(cat taskdef.json)
          echo "$TASK_DEF_JSON" > taskdef-temp.json
          TASK_ARN=$(aws ecs register-task-definition --cli-input-json file://taskdef-temp.json --query 'taskDefinition.taskDefinitionArn' --output text)
          echo "taskDefinitionArn=$TASK_ARN" >> $GITHUB_OUTPUT

      - name: Trigger CodeDeploy Deployment
        run: |
          aws deploy create-deployment \
            --application-name strapi-codedeploy-app \
            --deployment-group-name strapi-deploy-group \
            --deployment-config-name CodeDeployDefault.ECSCanary10Percent5Minutes \
            --revision revisionType=AppSpecContent,appSpecContent="{\"version\":\"1.0\",\"Resources\":[{\"TargetService\":{\"Type\":\"AWS::ECS::Service\",\"Properties\":{\"TaskDefinition\":\"${{ steps.register_task_def.outputs.taskDefinitionArn }}\",\"LoadBalancerInfo\":{\"ContainerName\":\"strapi\",\"ContainerPort\":1337}}}}]}"

      - name: Terraform Destroy
        run: |
          cd terraform_10
          terraform destroy -auto-approve

# ------------------------------------------------------------------
# name: Strapi Deployment using ECS task 10

# on:
#   workflow_dispatch: 
  
# jobs:
#   apply:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v2

#       - name: Set up Terraform
#         uses: hashicorp/setup-terraform@v2
#         with:
#           terraform_version: 1.5.7 

#       - name: Configure AWS credentials
#         uses: aws-actions/configure-aws-credentials@v3
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws-region: us-east-1

#       - name: Terraform Init
#         run: |
#           cd terraform_10
#           terraform init

#       - name: Terraform plan
#         run: |
#           cd terraform_10
#           terraform plan
          
#       - name: Terraform Apply
#         run: |
#           cd terraform_10
#           terraform apply -auto-approve

#       - name: Get ECS Task Definition ARN
#         id: get_task_def
#         run: |
#           TASK_ARN=$(aws ecs list-task-definitions --family-prefix strapi-task --sort DESC --max-items 1 --query 'taskDefinitionArns[0]' --output text)
#           echo "taskDefinitionArn=$TASK_ARN" >> $GITHUB_OUTPUT

#       - name: Trigger CodeDeploy Deployment
#         run: |
#           aws deploy create-deployment \
#             --application-name strapi-codedeploy-app \
#             --deployment-group-name strapi-deploy-group \
#             --deployment-config-name CodeDeployDefault.ECSCanary10Percent5Minutes \
#             --revision revisionType=AppSpecContent,appSpecContent="{\"version\":\"1.0\",\"Resources\":[{\"TargetService\":{\"Type\":\"AWS::ECS::Service\",\"Properties\":{\"TaskDefinition\":\"${{ steps.get_task_def.outputs.taskDefinitionArn }}\",\"LoadBalancerInfo\":{\"ContainerName\":\"strapi\",\"ContainerPort\":1337}}}}]}"          

#       - name: Terraform Destroy
#         run: |
#           cd terraform_10
#           terraform destory -auto-approve